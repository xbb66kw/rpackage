% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/RDD.R
\docType{methods}
\name{combineByKey}
\alias{combineByKey}
\alias{combineByKey,RDD,ANY,ANY,ANY,integer-method}
\title{Combine values by key}
\usage{
combineByKey(rdd, createCombiner, mergeValue, mergeCombiners, numPartitions)

\S4method{combineByKey}{RDD,ANY,ANY,ANY,integer}(rdd, createCombiner,
  mergeValue, mergeCombiners, numPartitions)
}
\arguments{
\item{rdd}{The RDD to combine. Should be an RDD where each element is
list(K, V) or c(K, V).}

\item{createCombiner}{Create a combiner (C) given a value (V)}

\item{mergeValue}{Merge the given value (V) with an existing combiner (C)}

\item{mergeCombiners}{Merge two combiners and return a new combiner}

\item{numPartitions}{Number of partitions to create.}
}
\value{
An RDD where each element is list(K, C) where C is the combined type
}
\description{
Generic function to combine the elements for each key using a custom set of
aggregation functions. Turns an RDD[(K, V)] into a result of type RDD[(K, C)],
for a "combined type" C. Note that V and C can be different -- for example, one
might group an RDD of type (Int, Int) into an RDD of type (Int, Seq[Int]).
Users provide three functions:
\itemize{
  \item createCombiner, which turns a V into a C (e.g., creates a one-element list)
  \item mergeValue, to merge a V into a C (e.g., adds it to the end of a list) -
  \item mergeCombiners, to combine two C's into a single one (e.g., concatentates
   two lists).
}
}
\examples{
\dontrun{
sc <- sparkR.init()
pairs <- list(list(1, 2), list(1.1, 3), list(1, 4))
rdd <- parallelize(sc, pairs)
parts <- combineByKey(rdd, function(x) { x }, "+", "+", 2L)
combined <- collect(parts)
combined[[1]] # Should be a list(1, 6)
}
}
\seealso{
groupByKey, reduceByKey
}

